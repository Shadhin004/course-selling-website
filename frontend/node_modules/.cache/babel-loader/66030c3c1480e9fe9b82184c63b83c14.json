{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { courseListReducer, courseDetailsReducer } from './reducers/courseReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer } from './reducers/userReducers';\nimport { userRegisterReducer } from './reducers/userReducers';\nimport { userDetailsReducer, userUpdateProfileReducer } from './reducers/userReducers';\nconst reducer = combineReducers({\n  courseList: courseListReducer,\n  courseDetails: courseDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer\n});\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : null;\nconst initialState = {\n  cart: {\n    cartItems: cartItemsFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"sources":["I:/PROJECT FOLDER/React/React-django/E-Learning Update/frontend/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","courseListReducer","courseDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","reducer","courseList","courseDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","cartItemsFromStorage","localStorage","getItem","JSON","parse","userInfoFromStorage","shippingAddressFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,iBAAT,EAA4BC,oBAA5B,QAAwD,2BAAxD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,gBAAT,QAAiC,yBAAjC;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,kBAAT,EAA6BC,wBAA7B,QAA6D,yBAA7D;AAGA,MAAMC,OAAO,GAAGX,eAAe,CAAC;AAC5BY,EAAAA,UAAU,EAAER,iBADgB;AAE5BS,EAAAA,aAAa,EAAER,oBAFa;AAG5BS,EAAAA,IAAI,EAAER,WAHsB;AAI5BS,EAAAA,SAAS,EAAER,gBAJiB;AAK5BS,EAAAA,YAAY,EAAER,mBALc;AAM5BS,EAAAA,WAAW,EAAER,kBANe;AAO5BS,EAAAA,iBAAiB,EAAER;AAPS,CAAD,CAA/B;AAWA,MAAMS,oBAAoB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,IACrBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADqB,GAC2B,EADxD;AAIA,MAAMG,mBAAmB,GAAGJ,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADwB,GACuB,IADnD;AAIA,MAAMI,0BAA0B,GAAGL,YAAY,CAACC,OAAb,CAAqB,iBAArB,IACnCC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CADmC,GACmB,IADtD;AAIA,MAAMK,YAAY,GAAG;AACjBZ,EAAAA,IAAI,EAAC;AACDa,IAAAA,SAAS,EAAER,oBADV;AAEDS,IAAAA,eAAe,EAAEH;AAFhB,GADY;AAKjBV,EAAAA,SAAS,EAAC;AAACc,IAAAA,QAAQ,EAAEL;AAAX;AALO,CAArB;AAQA,MAAMM,UAAU,GAAG,CAAC5B,KAAD,CAAnB;AAEA,MAAM6B,KAAK,GAAGhC,WAAW,CAACY,OAAD,EAAUe,YAAV,EAAwBvB,mBAAmB,CAACF,eAAe,CAAC,GAAG6B,UAAJ,CAAhB,CAA3C,CAAzB;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport { courseListReducer, courseDetailsReducer } from './reducers/courseReducers'\r\nimport { cartReducer } from './reducers/cartReducers'\r\nimport { userLoginReducer } from './reducers/userReducers'\r\nimport { userRegisterReducer } from './reducers/userReducers'\r\nimport { userDetailsReducer, userUpdateProfileReducer } from './reducers/userReducers'\r\n\r\n\r\nconst reducer = combineReducers({\r\n    courseList: courseListReducer,\r\n    courseDetails: courseDetailsReducer,\r\n    cart: cartReducer,\r\n    userLogin: userLoginReducer,\r\n    userRegister: userRegisterReducer,\r\n    userDetails: userDetailsReducer,\r\n    userUpdateProfile: userUpdateProfileReducer,\r\n})\r\n\r\n\r\nconst cartItemsFromStorage = localStorage.getItem('cartItems') ? \r\n        JSON.parse(localStorage.getItem('cartItems')) : []\r\n\r\n\r\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? \r\n    JSON.parse(localStorage.getItem('userInfo')) : null\r\n\r\n\r\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? \r\nJSON.parse(localStorage.getItem('shippingAddress')) : null\r\n\r\n\r\nconst initialState = {\r\n    cart:{\r\n        cartItems: cartItemsFromStorage,\r\n        shippingAddress: shippingAddressFromStorage,\r\n    },\r\n    userLogin:{userInfo: userInfoFromStorage}\r\n}\r\n\r\nconst middleware = [thunk]\r\n\r\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)))\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}